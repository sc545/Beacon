1. 메인 화면에서 SCAN DEVICE 버튼을 누르고 스캔 액비비티로 이동
2. 스캔 된 디바이스의 이름, 거리, 주소를 확인하고 원하는 디바이스를 클릭
3. 디바이스의 주소, 연결 상태 를 확인하고 아래 리스트 목록에 확인하고 싶은 서비스를 클릭 확장된 리스트에서 해당 서비스의 특성 값을 확인.
4. 스캔된 디바이스의 거리는 최상위 경로에 test.txt 파일로 저장되어 있음.


3개의 액티비티 클래스와 1개의 서비스 클래스로 구성

========================================================================================================

MainActivity : 첫 메인 액티비티. 스캔 버튼으로 다음 DeviceScanActivity로 이동.

========================================================================================================

DeviceScanActivity : 디바이스를 스캔하고 간단한 정보를 보여줄 리스트 형식의 액티비티.

// 멤버 변수

- private LeDeviceListAdapter mLeDeviceListAdapter; // 검색된 디바이스들과 리스트 뷰를 담을 변수(내부 클래스)
- private BluetoothAdapter mBluetoothAdapter; // BLE 디바이스를 검색할 블루투스 어댑터 변수
- private boolean mScanning; // 스캐닝 여부 플래그 변수
- private Handler mHandler; // 스캔 타임아웃을 위한 핸들러 변수

- private static final int REQUEST_ENABLE_BT = 1;
- private static final long SCAN_PERIOD = 10000000; // 스캔 타임아웃 시간


- double mDistance; // 스캔된 디바이스의 거리를 담을 변수
- String mPath; // ExternalStorageDirectory 경로를 담을 변수
- File file; // test.txt 파일을 생성할 File 변수


- private BluetoothAdapter.LeScanCallback mLeScanCallback = new BluetoothAdapter.LeScanCallback() {익명 클래스} // 디바이스가 스캔되면 실행 할 동작 기술, 거리를 계산하고 mDistance 에 저장하고 최상위 디렉토리에 test.txt 파일로 기록


// 메서드

- protected void onCreate() // 멤버 변수 초기화 및 BLE 기능 여부 체크
- public boolean onCreateOptionsMenu() // 옵션 메뉴 생성및 스캐닝 여부에 따라 메뉴 아이템 변경
- public boolean onOptionsItemSelected() // 옵션 메뉴 아이템이 선택되었을 경우 mLeDeviceListAdapter 변수에 등록된 디바이스 비움, 스캔 시작 또는 스캔 중지
- protected void onResume() // 블루투스 기능 활성화 여부 체크, mLeDeviceListAdapter 변수 초기화및 리스트에 어댑터 등록, 스캔 시작
- protected void onActivityResult() // 유저가 블루투스 기능을 활성화 하지 않을 경우 DeviceScanActivity 종료
- protected void onPause() // 액티비티가 Pause 상태가 되면 스캔을 중지하고 mLeDeviceListAdapter 변수에 등록된 디바이스 비움
- protected void onListItemClick() // 리스트에 아이템이 클릭 되면 스캔을 중지하고 intent로 클릭된 디바이스의 이름과 주소를 담고 DeviceControlActivity 로 이동
- private void scanLeDevice() // 스캔 여부를 boolean 타입으로 받아서 스캔을 시작하고 중지한 후에 옵션 메뉴 갱신
- private void write() // 최상위 디렉토리에 test.txt 파일로 기록하는 메서드
- private static String getCurrentTime() // 날짜 구하는 메서드
- private static double computeAccuracy() // 비콘의 거리 측정 메서드

// 내부클래스

- static class ViewHolder {} // ViewHolder 내부 클래스 정의
- private class LeDeviceListAdapter extends BaseAdapter {} // LeDeviceListAdapter 내부 클래스 정의

========================================================================================================

DeviceControlActivity : DeviceScanActivity 액티비티에서 선택된 디바이스에 서비스 정보를 보여줄 액티비티.

// 멤버 변수

- public static final String EXTRAS_DEVICE_NAME = "DEVICE_NAME"; // intent extra name
- public static final String EXTRAS_DEVICE_ADDRESS = "DEVICE_ADDRESS"; // intent extra name
- private TextView mConnectionState; // TextView 변수
- private TextView mDataField; // TextView 변수
- private String mDeviceName; // intent로 넘어온 divice name 을 저장할 변수
- private String mDeviceAddress; // intent로 넘어온 divice address 를 저장할 변수
- private ExpandableListView mGattServicesList; // 서비스 목록을 뿌려줄 리스트 변수
- private BluetoothLeService mBluetoothLeService; // BluetoothLeService 변수
- private ArrayList<ArrayList<BluetoothGattCharacteristic>> mGattCharacteristics = new ArrayList<ArrayList<BluetoothGattCharacteristic>>(); // ?
- private boolean mConnected = false; // 연결 상태를 담을 변수
- private BluetoothGattCharacteristic mNotifyCharacteristic;  // ?

- private final String LIST_NAME = "NAME"; // ?
- private final String LIST_UUID = "UUID"; // ?

- private final ServiceConnection mServiceConnection = new ServiceConnection() {익명 클래스} // 서비스 커넥션 관련 변수, 서비스의 connected/disconnected 상황에 따라 수행 할 내용 기술
- private final BroadcastReceiver mGattUpdateReceiver = new BroadcastReceiver() {익명 클래스} // 리시버 변수, 서비스에서 브로드캐스팅된 액션에 따라 수행 할 내용 기술
- private final ExpandableListView.OnChildClickListener servicesListClickListner = new ExpandableListView.OnChildClickListener() {익명 클래스} // 서비스가 클릭 되었을때 특성을 보여줄 리스너

// 메서드

- private void clearUI() // 서비스에서 연결 상태가 끊어 졌을 때 리스트 비움
- protected void onCreate() // 멤버 변수 초기화및 bindService 메서드 실행
- protected void onResume() // mGattUpdateReceiver 리시버 등록
- protected void onPause() // mGattUpdateReceiver 리시버 해제
- protected void onDestroy() // unbindService 메서드 실행
- public boolean onCreateOptionsMenu() // 옵션 메뉴 생성 
- public boolean onOptionsItemSelected() // 옵션 메뉴 선택시
- private void updateConnectionState() // 연결 상태 업데이트
- private void displayData() // 데이터 값 뿌리기
- private void displayGattServices() // 해당 디바이스의 서비스와 특성 목록을 뿌려줌
- private static IntentFilter makeGattUpdateIntentFilter() // 인텐트 필터

========================================================================================================

BluetoothLeService : 디바이스와의 연결과 정보를 가져오고 브로드 캐스팅 해줄 서비스

// 멤버 변수

- private BluetoothManager mBluetoothManager; // 블루투스 서비스를 가져올 매니져 변수
- private BluetoothAdapter mBluetoothAdapter; // 디바이스 정보를 가져올 블루투스 어댑터 변수
- private String mBluetoothDeviceAddress; // 디바이스 주소를 담을 변수
- private BluetoothGatt mBluetoothGatt; // 디바이스와 연결을 할 변수

- private int mConnectionState = STATE_DISCONNECTED; // 연결 상태를 담을 변수

- private static final int STATE_DISCONNECTED = 0; 
- private static final int STATE_CONNECTING = 1; 
- private static final int STATE_CONNECTED = 2;
- public final static String ACTION_GATT_CONNECTED = "com.example.bluetooth.le.ACTION_GATT_CONNECTED"; 
- public final static String ACTION_GATT_DISCONNECTED = "com.example.bluetooth.le.ACTION_GATT_DISCONNECTED";
- public final static String ACTION_GATT_SERVICES_DISCOVERED = "com.example.bluetooth.le.ACTION_GATT_SERVICES_DISCOVERED"; 
- public final static String ACTION_DATA_AVAILABLE = "com.example.bluetooth.le.ACTION_DATA_AVAILABLE"; 
- public final static String EXTRA_DATA = "com.example.bluetooth.le.EXTRA_DATA"; 
- public final static UUID UUID_HEART_RATE_MEASUREMENT = UUID.fromString(SampleGattAttributes.HEART_RATE_MEASUREMENT);

- private final BluetoothGattCallback mGattCallback = new BluetoothGattCallback() {익명 클래스} // 연결 상태가 변경될 때, 서비스가 발견되어졌을 때, 특성을 읽을때, 특성이 변경될 때 수행 할 내용 기술

- private final IBinder mBinder = new LocalBinder() // ?

// 메서드

- private void broadcastUpdate() // 액션 정보 브로드캐스팅
- private void broadcastUpdate() // 액션 정보와 특성 정보 브로드 캐스팅
- public IBinder onBind() // ?
- public boolean onUnbind() // ?
- public boolean initialize() // 블루투스 어댑터 초기화
- public boolean connect() // 디바이스 주소를 받아 연결시킴
- public void disconnect() // 연결을 끊음
- public void close() // 자원 반환
- public void readCharacteristic() // 특성 정보를 읽음
- public void setCharacteristicNotification() // ?
public List<BluetoothGattService> getSupportedGattServices() // ?

// 내부클래스

public class LocalBinder extends Binder {} // LocalBinder 내부 클래스 정의